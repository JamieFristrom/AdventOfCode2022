use std::collections::VecDeque;


fn get_rock_types() -> Vec<Vec<Vec<u8>>> {
   vec![
    vec![vec![1,1,1,1]],

    vec![vec![0,1,0],
         vec![1,1,1],
         vec![0,1,0]],

    vec![vec![0,0,1],
         vec![0,0,1],
         vec![1,1,1]],  // y coordinate goes up like a regular graph, so here it's reversed
         
    vec![vec![1],
         vec![1],
         vec![1],
         vec![1]],
         
    vec![vec![1,1],
         vec![1,1]],
   ]
}

type Board = VecDeque<Vec<u8>>;

fn main() {
    println!("Hello, world!");
    let input = get_puzzle_input();
    println!("Puzzle input len {}", input.len());
    let answer = do_the_thing(get_puzzle_input(), 2022);
    println!("boom? {}", answer)
}

fn do_the_thing(input: &str, num_rocks: usize) -> i64 {
    let jet_streams = parse_input(input);

    let (board, bottom_index) = simulate(&jet_streams, num_rocks);

    highest_level(&board) as i64 + bottom_index
}

#[test]
fn test_do_part_1() {
    let answer =  do_the_thing(get_puzzle_input(), 2022);
    assert_eq!(3109, answer);
}

#[test]
fn test_part_2_on_sample() {
    let answer = do_the_thing(get_puzzle_input(), 1000000000000);
    assert_eq!(1514285714288, answer);
}

fn simulate(jet_streams: &Vec<i64>, num_rocks: usize) -> (Board, i64) {    
    let mut board = VecDeque::from(vec![vec![0u8;7];100]);
    let mut stream_idx = 0;
    let mut bottom_level: i64 = 0;
    for i in 0..num_rocks {
        if i%100000==0 {
            println!("Rocks dropped {i}");
        }
        stream_idx = drop_rock(&mut board, 
            &mut bottom_level,
            i % get_rock_types().len(), 
            jet_streams, 
            stream_idx);
    }

    (board, bottom_level)
}

#[test]
fn test_sample_input() {
    let answer = do_the_thing(get_sample_input(), 2022);
    assert_eq!(3068, answer);
}

fn highest_level(board: &Board) -> usize {
    match board.iter().position(|row| {
            row.iter().find(|cell| {
                **cell!=0
            } ).is_none()
        }) {
            Some(row_idx) => row_idx,
            None => { panic!(); }
        }
}

#[test]
fn test_highest_level() {
    let mut board = VecDeque::from(vec![vec![0u8;7];100]);
    assert_eq!(0,highest_level(&board));
    for i in 0..11 {
        board[i][3] = 1u8;
    }
    assert_eq!(11,highest_level(&board));
}

// returns the position in the jet_stream
fn drop_rock(board: &mut Board, bottom_level: &mut i64, rock_type: usize, jet_streams: &[i64], mut jet_stream_idx: usize) -> usize {
    let rock = get_rock_types()[rock_type].clone();
    let mut rock_x = 2i64;
    // frex, highest level is row[0], rock is 1-3, +2 makes for 3 for flattie, 5 for square, (0-indexed means 3 empty rows between)
    let mut rock_y = highest_level(board) as i64+*bottom_level+rock.len() as i64+2;  // origin is top left
    while rock_y - *bottom_level >= (board.len()-1) as i64 {
        board.push_back(vec![0u8,0u8,0u8,0u8,0u8,0u8,0u8]);
        board.pop_front();
        *bottom_level += 1;
    }
    let mut collision = false;
    while !collision {
        // sideways
        let check_x = rock_x+jet_streams[jet_stream_idx % jet_streams.len()];
        jet_stream_idx += 1;
        let check_y = rock_y;
        let mut side_collision = false;
        for (y, row) in rock.iter().enumerate() {
            let pixel_y = (check_y - *bottom_level) as usize - y;
            for (x, pixel) in row.iter().enumerate() {
                let pixel_x = check_x as usize+x;
                if pixel_x as usize>=board[0].len() {  // unsigned automatically checks <0 case
                    side_collision = true;
                    break;
                }
                if *pixel!=0u8 {
                    if board[pixel_y][(pixel_x as usize)]!=0 {
                        side_collision = true;
                        break;
                    }
                }
            }
        }
        if !side_collision {
            rock_y = check_y;
            rock_x = check_x;
        }
        // and vertical
        let check_x = rock_x;
        let check_y = rock_y-1;
        for (y, row) in rock.iter().enumerate() {
            if (check_y-y as i64) < 0 { collision=true; break; }
            let pixel_y = (check_y-*bottom_level) as usize - y;
            for (x, pixel) in row.iter().enumerate() {
                if *pixel!=0u8 {
                    if board[pixel_y][(check_x as usize+x)]!=0 {
                        collision = true;
                        break;
                    }
                }
            }
        }
        if !collision {
            rock_x = check_x;
            rock_y = check_y;
        }
    }
    // and place permanently
    for (y,row) in rock.iter().enumerate() {
        for (x, pixel) in row.iter().enumerate() {
            board[(rock_y - *bottom_level) as usize-y][rock_x as usize+x] |= rock[y][x];  // frex, rock_y -> 3 ; rock row 0 goes on 3, rock row 1 goes on 2, rock row 2 goes on 1
        }
    }

    jet_stream_idx
}

#[test]
fn test_drop_rocks_no_stream() {
    let mut board = VecDeque::from(vec![vec![0u8;7];100]);
    let stream = vec![0;3000];
    let mut bottom_level = 0;
    let jet_stream_idx = drop_rock(&mut board, &mut bottom_level, 0, &stream, 0);
    assert_eq!(4, jet_stream_idx);
    assert_eq!(vec![0,0,1,1,1,1,0],board[0]);
    assert_eq!(vec![0,0,0,0,0,0,0],board[1]);
    let jet_stream_idx = drop_rock(&mut board, &mut bottom_level, 1, &stream, jet_stream_idx);
    assert_eq!(8, jet_stream_idx);
    assert_eq!(vec![0,0,1,1,1,1,0],board[0]);
    assert_eq!(vec![0,0,0,1,0,0,0],board[1]);
    assert_eq!(vec![0,0,1,1,1,0,0],board[2]);
    assert_eq!(vec![0,0,0,1,0,0,0],board[3]);
    assert_eq!(vec![0,0,0,0,0,0,0],board[4]);
    let jet_stream_idx = drop_rock(&mut board,  &mut bottom_level,2, &stream, jet_stream_idx);
    assert_eq!(12, jet_stream_idx);
    assert_eq!(vec![0,0,1,1,1,1,0],board[0]);
    assert_eq!(vec![0,0,0,1,0,0,0],board[1]);
    assert_eq!(vec![0,0,1,1,1,0,0],board[2]);
    assert_eq!(vec![0,0,0,1,0,0,0],board[3]);
    assert_eq!(vec![0,0,1,1,1,0,0],board[4]);
    assert_eq!(vec![0,0,0,0,1,0,0],board[5]);
    assert_eq!(vec![0,0,0,0,1,0,0],board[6]);
    assert_eq!(vec![0,0,0,0,0,0,0],board[7]);
    let jet_stream_idx = drop_rock(&mut board,  &mut bottom_level,3, &stream, jet_stream_idx);
    assert_eq!(18, jet_stream_idx);  // this one travelled extra two spaces, conumsed 4+2 streams
    assert_eq!(vec![0,0,1,1,1,1,0],board[0]);
    assert_eq!(vec![0,0,0,1,0,0,0],board[1]);
    assert_eq!(vec![0,0,1,1,1,0,0],board[2]);
    assert_eq!(vec![0,0,0,1,0,0,0],board[3]);
    assert_eq!(vec![0,0,1,1,1,0,0],board[4]);
    assert_eq!(vec![0,0,1,0,1,0,0],board[5]);
    assert_eq!(vec![0,0,1,0,1,0,0],board[6]);
    assert_eq!(vec![0,0,1,0,0,0,0],board[7]);
    assert_eq!(vec![0,0,1,0,0,0,0],board[8]);
    assert_eq!(vec![0,0,0,0,0,0,0],board[9]);
    let jet_stream_idx = drop_rock(&mut board,  &mut bottom_level,4, &stream, jet_stream_idx);
    assert_eq!(22, jet_stream_idx);
    assert_eq!(vec![0,0,1,1,1,1,0],board[0]);
    assert_eq!(vec![0,0,0,1,0,0,0],board[1]);
    assert_eq!(vec![0,0,1,1,1,0,0],board[2]);
    assert_eq!(vec![0,0,0,1,0,0,0],board[3]);
    assert_eq!(vec![0,0,1,1,1,0,0],board[4]);
    assert_eq!(vec![0,0,1,0,1,0,0],board[5]);
    assert_eq!(vec![0,0,1,0,1,0,0],board[6]);
    assert_eq!(vec![0,0,1,0,0,0,0],board[7]);
    assert_eq!(vec![0,0,1,0,0,0,0],board[8]);
    assert_eq!(vec![0,0,1,1,0,0,0],board[9]);
    assert_eq!(vec![0,0,1,1,0,0,0],board[10]);
    assert_eq!(vec![0,0,0,0,0,0,0],board[11]);
}

#[test]
fn test_drop_rocks_left_stream() {
    let mut board = VecDeque::from(vec![vec![0u8;7];100]);
    let stream = vec![-1;3000];
    let mut bottom_level = 0;
    let jet_stream_idx = drop_rock(&mut board,  &mut bottom_level,0, &stream, 0);
    assert_eq!(vec![1,1,1,1,0,0,0],board[0]);
    assert_eq!(vec![0,0,0,0,0,0,0],board[1]);
    assert_eq!(4, jet_stream_idx);
    let jet_stream_idx = drop_rock(&mut board,  &mut bottom_level,1, &stream, jet_stream_idx);
    assert_eq!(8, jet_stream_idx);
    assert_eq!(vec![1,1,1,1,0,0,0],board[0]);
    assert_eq!(vec![0,1,0,0,0,0,0],board[1]);
    assert_eq!(vec![1,1,1,0,0,0,0],board[2]);
    assert_eq!(vec![0,1,0,0,0,0,0],board[3]);
    assert_eq!(vec![0,0,0,0,0,0,0],board[4]);
    let jet_stream_idx = drop_rock(&mut board,  &mut bottom_level,2, &stream, jet_stream_idx);
    assert_eq!(12, jet_stream_idx);
    assert_eq!(vec![1,1,1,1,0,0,0],board[0]);
    assert_eq!(vec![0,1,0,0,0,0,0],board[1]);
    assert_eq!(vec![1,1,1,0,0,0,0],board[2]);
    assert_eq!(vec![0,1,0,0,0,0,0],board[3]);
    assert_eq!(vec![1,1,1,0,0,0,0],board[4]);
    assert_eq!(vec![0,0,1,0,0,0,0],board[5]);
    assert_eq!(vec![0,0,1,0,0,0,0],board[6]);
    assert_eq!(vec![0,0,0,0,0,0,0],board[7]);
    let jet_stream_idx = drop_rock(&mut board,  &mut bottom_level,3, &stream, jet_stream_idx);
    assert_eq!(18, jet_stream_idx);  // this one travelled extra two spaces, conumsed 4+2 streams
    assert_eq!(vec![1,1,1,1,0,0,0],board[0]);
    assert_eq!(vec![0,1,0,0,0,0,0],board[1]);
    assert_eq!(vec![1,1,1,0,0,0,0],board[2]);
    assert_eq!(vec![0,1,0,0,0,0,0],board[3]);
    assert_eq!(vec![1,1,1,0,0,0,0],board[4]);
    assert_eq!(vec![1,0,1,0,0,0,0],board[5]);
    assert_eq!(vec![1,0,1,0,0,0,0],board[6]);    
    assert_eq!(vec![1,0,0,0,0,0,0],board[7]);
    assert_eq!(vec![1,0,0,0,0,0,0],board[8]);
    assert_eq!(vec![0,0,0,0,0,0,0],board[9]);
    let jet_stream_idx = drop_rock(&mut board,  &mut bottom_level,4, &stream, jet_stream_idx);
    assert_eq!(22, jet_stream_idx);
    assert_eq!(vec![1,1,1,1,0,0,0],board[0]);
    assert_eq!(vec![0,1,0,0,0,0,0],board[1]);
    assert_eq!(vec![1,1,1,0,0,0,0],board[2]);
    assert_eq!(vec![0,1,0,0,0,0,0],board[3]);
    assert_eq!(vec![1,1,1,0,0,0,0],board[4]);
    assert_eq!(vec![1,0,1,0,0,0,0],board[5]);
    assert_eq!(vec![1,0,1,0,0,0,0],board[6]);    
    assert_eq!(vec![1,0,0,0,0,0,0],board[7]);
    assert_eq!(vec![1,0,0,0,0,0,0],board[8]);
    assert_eq!(vec![1,1,0,0,0,0,0],board[9]);
    assert_eq!(vec![1,1,0,0,0,0,0],board[10]);
}

#[test]
fn test_first_few_sample_rocks() {
    let puzzle_ascii_art = "|.......|
|....#..|
|....#..|
|....##.|
|##..##.|
|######.|
|.###...|
|..#....|
|.####..|
|....##.|
|....##.|
|....#..|
|..#.#..|
|..#.#..|
|#####..|
|..###..|
|...#...|
|..####.|";
    let expected_board: Board = puzzle_ascii_art.lines().rev().map(|line| {
        line.split_at(8).0.split_at(1).1.chars().map(|char| if char=='#' {1} else {0}).collect()}).collect();
    print!("{:?}", expected_board);
    let jet_streams = parse_input(get_sample_input());
    let (actual_board, _) = simulate(&jet_streams, 10);
    let mut idx = 0;
    for row in expected_board {
        println!("{idx}");
        assert_eq!(row, actual_board[idx]);
        idx += 1;
    }
}

fn parse_input(input: &str) -> Vec<i64> {
    input.chars().map(|char| if char=='>' {1} else if char =='<' {-1} else { panic!() } ).collect()
}

#[test]
fn test_parse_sample_input() {
    let results = parse_input(get_sample_input());
    assert_eq!(get_sample_input().chars().count(), results.len());
    assert_eq!(1, results[0]);
    assert_eq!(1, results[1]);
    assert_eq!(1, results[2]);
    assert_eq!(-1, results[3]);
    assert_eq!(-1, results[4]);
    assert_eq!(1, results[5]);
}

fn get_sample_input() -> &'static str {
    ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>"
}

fn get_puzzle_input() -> &'static str {
    "><<<<><<>>><<<>>><<><<>>>><<><<>><><<<<>>>><<>>><<<>>>><<<<><<<<>>>><>>>><>>><<><>><<>><<<<>><<><<><>><<><>>><<<>><>>><<>><<>>><<<><>>><<>>><<<<>><<<<><<<><<>>><<<>>><>>><<<>>><<<<>>>><<<>>><<<>><<<<>><<<>>><<<>>><<>><<>><<<>><>><<<><<>><<<>>>><>>>><>><<>>>><<<<><<<<><<<<><<>>>><<<>>>><<<><<>>><<<><><<>><<>>><<>><>>><<>><<>>>><<<<><<<>>><<>>>><<>>>><<>><>>><<<<>>><<<>><<<<><>>><>><<<<>>><<>>><><<<>>><<<><<<>><<<<>>>><<<><<<><<>>>><<<>>><<><<>>>><<<<>><<>><<<<>>>><<<><<>>><<<<>>>><<<<>>>><<<<>><><>><<>>>><>>>><<<<>><>>><<<<>>><><<><<<>>>><><<<>><<>>><<<>>><<<>><<<><<>><<><<>>>><<>>><<<<><<<<><>>>><<>><<>>><<<>>>><<<<>>>><<<>>>><<>><>>>><><<<>>>><<<<><>>><>>><<>>>><>>><<<<><<>>><<<<><<>>><<>><<<>><<<<>>><<>>><<<>>><>>><<<<><>>><><<<<>>><>>><<<<><><<<<>>>><<>>><<<<>>><<<<>>>><>>>><<><<<<>>><<<<>><<<<>><<>><<<<>>>><<<>>>><<<<>>><>>>><<<<>><<<<>><<>>>><<<><<<>>>><<><<<<>>>><><<<<>><>><<>>>><<<<>>><<>>><<>>><<<>>>><>>><<<<>>>><>>><<>><<><<>><<><<><<<>>><>><<<>><<<><<<<><<<<>><<>><<<<>>>><<<<><<<<>>>><<><<><<<<>><<<>>><>>><<<<><><>><<>>><<><>>><<<>><<<<><<<<>>><<<>>>><<>><<><<<<>><<<<>>><<>><<>><<<<><>>>><><<>>>><>>><<<><>><<>>>><>>><<<<><<<<>>><<<>>><<<>>>><<<<><<<<>>>><<><<<<>>><<<>><<>>>><<>>><<>><<><<<<>>><<>><<><<<<>>><<<><<<<>>><<>>>><<<<>><>>>><<<<>>><<>>><<><<>><<<>>><<<<>>>><<<<>><<><<>><<<<>>>><><<<><><<<><<<><<<<>><>><<<>>><><<<><<<<><<<>><>>><<>><>>><<>><<>><><>>>><<<><>>><<>>>><<<>><<<>><<<<>>><<<<>>><<<<>>>><>><<<>><<>><<<><<>>>><>><<<><<<<>>><<><<<<>><<>>><<<<>>>><<<>>>><>>><<<>>><<<>>><<>><<<<>>>><<<<><><<<<>>>><<<>><<<<><<<<>>><<<<>>>><<>>><<<<>>>><<<<><<<><>>>><<>>>><<<<>><<<>>>><<<<>><<>>>><>><>>>><<<>><<>>>><<<>>>><<>><<<>>>><<<>><>><><<><>><>><<<>><<<>>><<>>><<<<>>><<<><<>>><<<<><>>>><<><>>>><<><<<>>>><><<<<>>><<<<>><<>>>><<<><<<>><<><>>><<>>>><<><>>>><<<<><>><<>><<<>>><>><<<>><<<<>>><<<<>><>><<><<<<><<<>>><><>>><<>>>><<><<<<>>><<>>><<<><<>>><><<<><>>><<><<<>>><<>>><<><<><<<<>>><<><<<<>><<<<>><>>>><<<<><>>>><<<<>>>><<>><<<<>>>><<<<><<<>>><<<<>>><<<<><<<><<>><>>>><>>><<<>>>><<<<>>><<<>><<<<>>>><<<>>><<<<>>><<<<>>><<<>>><<>><<<>><<<<>><<<<>>>><<>><<>><>>><<<<>>><<<<>>><<<<><<>>><><<<<>><<>>>><<><<>>><>><<<><>>><<<<><<>><<>>><><<>>><<<<><<<<><>>>><<>>><<>>>><<<>>><<>>><<<<>>><<>>>><>><><<<<>>>><>>><<<><<<<>>><<><<>>>><<<<>>>><>><>><<<>>>><>><><<>>><<<<><<<>>><<>>><><<>>>><<>>>><<<><<<>>><<<><<<>>><<<><<>>><<<<>><<<>><>>><>><<<<>>>><><<<<>>>><><<<<>>>><<<>>>><<>><<<>>><<<<>>>><<<>><<><>>>><<<>>><<<<><<<>>><<<>>><<>><<>>>><<>>><>><<<>>>><<>>>><<<><<>>><<<>><><<>>><<<<>>>><<<><<>>><>><>>>><><>>><><<<<>><<<><>>>><>><<<>><>>><<<><<><><<>><<<>>>><<<<>>>><>>>><<<><<<>><>>>><<>>>><<<>>><<><<<<><<<<>><<<>><<>>><<><><<<<>>><>>>><<<><>><<><>><>>>><><>>><<><<>><<<>>>><<>><<><<<><><<<>>>><<<<>><<<<>>><<<<>>>><>>><<<<><<>>>><><<>>><<<<>><<<>><<<>>>><><<<>><<<<><<<><<>>>><<<>>>><<<<>>><<<>>>><<<<>><<<>>><<<>>><>>>><<<<><<<<>><>>>><<>><<<<>>><<<<><<<<><<<<><<<<>>><<<>><<<>><<>>>><>><<<<><<><<>>><<>>>><<<><>><<<<><<<>>>><<<<><>><<<>>>><<<<>>>><<<>><<<><<<>>>><<>>>><<<>><><<<<>>>><<>>>><<<>>><>>>><<<<>><<<<>><>>><<<<>>><>>>><<<<>>><<>>><<<>>><<<>>><<<<>>><<<<>>>><<<<>><<<<>><>>><<<<>>><<<>>><<>><<<<><<>>><>>>><<<>>><<>>><<><<<>>>><<<>>><<>>>><<>>><><<<<>><>>>><>>><>>>><<<>><<>><<<<><<<><>><<<<>>>><<<><<>><<<<>><<>><<>><<>>><<<<>>><<<<><<<>>><>><>>>><<<>>><>>>><<<<>><<<<>><>>>><<>>><<<<>>><<>>><<<<><>>>><>><><<<<>><>>><<<<>><<<<>>>><<<>>>><<<<>><<<<><<<<>>><>>><<<<>><<<><<<><><<<>>><<>>>><<<<><<<<>>><<<<><<>>><<<>>><<<<>>>><<<>>><<<<><<><<>>>><>>>><<<<>>><<<<>>>><<>>>><<<>><<<<>><<>>>><<<>>>><<<<>>><<<<>>><<<><<><<<<>>>><<><<><>>>><<<>>><<<<>>><>><>>>><<<<>><<<>>>><<<>><>>><<>><>><<<<>>>><><<<>>>><<>>>><<<<><<<>>><<<<>><<<<>>>><<<><<<>><<>><<<>>>><<<>><>>>><<>>>><<<>><>><>>>><<<>>><<<<>>>><>><<>><><>>><<<<><<>><>><>>><<>><>><<<><<>>>><<>>>><<<>>>><<>>>><><<>>>><<<>><<<<>><<<<><<<<>>>><>>>><><>>><<<<>>>><<<>><<<>>><<<<>>><<><<<>>>><>>><>>><<<>>><<<><>>><<<><<<>>>><<>>><<<<>><<<<>><<<>><<<<>>><<<<>>>><<<<>>>><>>>><><<<<>><<<<>><<<<>>><<<<>>>><>>><<>><>>><>>>><>>><<<><>><>>><><>>><>><>>>><<<<>><<<>>>><<<>>><<<<>><<<<>>><>><><<<<>><<>><<<><<>><<<<>>><<<>><>><>><<><<<>>>><<<<>><<<<><<<<><<<>>>><<><<<<>><<<>>><<><<><>>><<>><<>>>><<<>><<>><>><<>><<<>>>><>>>><><>>>><<<<>>>><<>>>><<>>>><<<<><<>><><<<<>>><<>>>><<<<>>><>>>><<<>>>><<<>><<>>><<>>><<<>>><<<<>>><<><<<<><<<<>>><<>>><<<<>>><<<>>>><<<<>><<<<>>>><<<<>>>><<><>><<>>><<>><<<>>>><>>><>><<<<>>><>><<<<>>>><<<<>><><<<><>>>><><<>>><<<<>><<<<>>><>><>>><<<>>><><<<<>>><>>><<<<>>><>>><<<>><>>>><><<<<>>>><<<<>><<<><<<>><<<>>><<<>>><<>>><>>><<<<>><>>><>>><<<>><<>>><<><<<<>><>>>><>>>><<<>><><>>><<<><>><<<>>>><<>>><<<<>>>><<>>><<<<>><<<<>>>><<<<>>>><<>>><>>>><<<<>>>><<<>>>><<<<>>><<>><><>>><<<>>>><<>>>><>>><<<<>>><<>>><<>>><<<>><>>><>>><<><<<><<<><>><><>>>><<<>>>><<<<>>>><>>><<<>>><<<<>><<<<><<>>><<>>>><<<<>>><<<<>>>><<>><<<<>>><<<<>><<<>>><<>>>><<>>>><<<<>>><<>><>><>><>><<<>>>><<<<>>>><<<>>>><<<<>>>><<<<><<<>><<<>><<<><<>>><<<>><>><<>>><<<><<><<<>>><<<<>><><<>>><<>>>><<><<<>>>><><<<>>>><<<<>><<<>>>><<>>><<<<>>><<<<>>><<<<>>>><<>>>><<><<<<>><<><<>>>><<><<>>><<<>>>><<>>><<<<>>><<<>>><<>>>><<<>>>><<<<>>><<<<>>><<<<>>><<><<>>><<<<>><<<<>>><<<><<<>>>><<<<>>>><<><><<>>><<<<><<<>>>><<<>>>><<<<>>><>>><<>>>><>><<<<>>><<<<>>>><<>><<<<>>><<<>>>><<<>>>><<<<>><>>>><<<<>>>><<<>><>>><<<<><<<>>><<<<>>>><<<<>>><<>>>><<>>>><<<>>><<<<>><>>><<<<>><<<<>>>><>><<<>>>><<><<>>>><<<>>><<><>>>><<<>>><<<>>>><<<<><<<>><<<<><<<>>>><<<<>>>><<<>>>><<<>>><>>>><<<><>>><<<<><<<><>><>><>><<<<>>><<><<<>>><<>><<<<>>><<<<>>><<<<>>><<><<<<>>>><<>>><<<>><<<>><>><<<>>>><>>>><<<<>><<><<<>><<<<>><<>>><<<>>>><<<><><<<>>><><<<<>>><<>><<>><>><<<<>><<<<><>>>><><>>>><<<><<><<<>>><>>><<<>>><<<<><<<<><><<><<>><<>><<<<>>><>>>><<<<>><<><>><>>><>>>><<<>>><<><>><<<<><>>>><>>>><>>>><<>>>><<<>>><<>>><<<>>><>>>><<>><<>><<<<>>>><<<>>><<>><>><<<>>>><>>><<<>>><<<>>><<<<>>>><<><>><<<>>><<<>>>><>>><<><>><<<<>><<<<>>>><<<<>>>><<<>><<<<><>>>><<><><<>><>><><>>>><<<>><<<<><<<<><><><>>><>><<<<>>>><<>>>><>>>><<>><>>>><<<<>><<<<>>><><<<>><>>>><>>>><<>>>><<<<>>>><><<<<><><<<<><<<<><<<>><<<>>>><<<<>>>><>>>><<<<>><<>>>><<<<>>>><>>><<<>>>><<><>>><<<<>>>><<><<><<<>><>><<><<>><<<<>>>><>>>><<>>><<<<>>><>>>><<<>>><<<>><<<><<<><>>><>><>><<<>>>><<<<><>>>><<<<><<<<><<>>><<<>>><<<>><>>><<<>><<<>><<><<<<>><<<>>>><<<>>>><>>><<<>>>><>>>><<<><<>><>><<<<><>>>><<<<>><>>>><<<><<<<><>>><<<<>>>><<<<>>>><<<>><>><<<>>><<<><<<<>><<><>>><<>>>><>><><<<<>>>><<<<>>><<>><<><<<<><<<<>>><<<>><<><<><>>>><>><<<<><<<><<<<>><<<<>><<<>><<><<<<><<<>>>><<><<<<>><<<<>>>><>>><<<<><<<>>><>>>><>>>><<<>>>><<>>>><<>>><<>>>><<>><<<<>>><<<>>><<<<>><<><<>>>><>><<>>>><<<<><<<>>>><<<>>>><<<>>>><<<><<<>><>>><<<<>>><<>><<<><<>>>><<<><<>>>><<<<>><<<<>><>><><<<>><<>>>><<<>><<<<>>><<<><<<<><<<>>><<<><<<<>>>><<>>>><>><<<<>>><><<<>>><<>>>><<<<><<>><<>>><>><<<>>>><<<<>>>><<>>>><<<<><><<<<>><><>><>><<>>><<>>><<><<<><><<<><><<>>><<<<>>>><<<>>><<<>><<<<>><<<>>><<<<><>>>><<>>>><<<<><<<>><<<>>>><<>><<>>>><<<>><<><<<>>>><>>><<<>>>><<>><<<<>>><<>><<<<><<>>><<<<>>>><>>>><<<>>><>><>>>><>>>><<>>><>>>><>>><<>>><<>>><<<>>><<<<>><>>>><<><<>>><<<>>>><<<<>>><<<><<<>>><<<>>><<>><>>><><<<><<>>><<>><<<>><<>>>><<>>>><>>>><<<>>><<<>>>><<<<>>>><><<<<>><<<>><<><<<<>><<<<><>>><>><>>><>>>><<>>><>>><<<<><<<<><<<>><>>>><>><<>>><><<<>>>><<<>>>><>>>><<<<>>><<<<>>>><<<>>><<<><>>>><><<<>><>>>><<><<<><<<>>><<>>><>>><<<<>>>><<><<<<>>>><<>>><<<<>>>><<<><<<<><>>><<<><>>><<<<>>><<<<><><<<<>><<<>><<<<><<<>><>>><>><<>>>><<>>><<<<>>><>>><<><<<<>>><>><<<<>>><><><<>>>><<<>>>><<>>>><<<<><>>>><<<<>><<>>>><>><<<>>><<>><>>><<<><<<>><<<><<>>><>>><<><<>><<<<><<>>>><<>>>><<<>>><<<<>><<<>><<<>>><<<>><<<<>>><<<<><><<<><><<<>><><>>>><>>>><<<><<<><<<<><<<>>>><<>><>>>><<<<>>>><>><<<<>>><>>>><<<><<<>>>><<<>>><><<<>>>><<<>>><<<<>>><>>><<<<><<<>><<<><><<<>><<><>>>><<>><<>>><<>><<<><>>>><<>><<<>><<>><>>><<<><<<<>>><<>>>><<>>><<<<>>><>>>><<<<>>><<<<>>><<>>><<>>>><<<<><>><<<>>><<<>>><>><<>>><><>><<>>><<<<>><<<<><<<<>>><<<<>>><<>>>><<<<>>>><>>><<<<><<>>>><<>>><>><<<<><<<<>>><<>>><<<<>>><<<><<>><<<<>>><>>>><<<>>>><<>><>><<<><<<>>>><<>>><<<<>>>><<<<>><<<<>>>><<<>>>><<>>><<<<>>><<<>>>><<>>><><>>>><<<<>>><<<<>>><<<>>>><<<<>>>><>>>><<>>>><><<>><>>>><<<<>>><<<<><<<>><>><<>>>><<>><>>><<>><<>>><<>>><<>>>><<<<>><<<<>><<<<>>>><<<<>>>><<>><<<><<>>><<>>><<<<>>><>>>><<><>><><>>><<<>><<<<>>>><<>><<<><<<>>><<<<>>><<>>>><<>><<<>>><<>>>><<>><<>>><<<<>><<<<>><<<><<<>>>><<<>>><<<<>><>><>>><>>>><>>>><<>>>><>>><<<>>><<><>>>><<<<>>><<<>><<<<>><<><>>>><<<<><<><>>><<<<>><<<<>>><<<><<><<<>><>>>><<<<>><<<<>>>><<<>>><><<>>>><<><><<>>><<<<>><<<<>>><>>>><<<>><<<<>>>><<<>>><<<<>>>><<><<<>>><<>>><<<><><<<<><><<>><<<<>>>><<<<>><<<<><<>>>><>><>><<>>>><>>>><<<<>><><<<>><<<>>>><<><<>><<<<>><<><>>>><<<<>><<>><<<>>><>>>><<<<><<<<>><<<><<>>>><<<><<<>>>><<>>>><<<<><>>><<<>>>><<<<>>>><>><>>>><<<>><<>>>><<<>>>><>>>><<<<>>>><<<<>>><<<><<><<<<>><>>>><<<>>><<>><<<<>>><<<<>><>><>>>><>>>><<>><>>>><<<<>>><>>><<<<>><<><<<>>><<>>>><<<<>>>><><><<<>>><<<<><<<<>><<><<<<>><<<>>><<><<<<>>>><<<<>><>><>><><><<><>><<<<>>><<><<<>>><<><<>>>><<<><<<<><<<<><<>>><>>><<>>><<>>>><<><<<<>>>><><<><<>>><><<<<>><>>><><<<<>>><<<<>><<<>>>><<<<><<<>><<<>><<><><<<>><<<>>>><<<><<<><>>><<<<>>><<>><<<>>><<<>>><<<><<><<<<>>><<<><>>>><<><<<>>><>>><<<>>><<<>>>><<<>>><<<>>>><<<><<>>><<>><<<>>>><<<<>><<<<><><<<<>><<>><<<>>><<<>><<<>>><<<<>><<>><>><<<><<>>><<<>>><>>><<<>>><<<>><<<>>>><<<<>><<>><<>><><<<>><<<<>>><<<>>><<<<><>>><<<<>><<<<>>>><<<>>><<<<>><<>>><<>>><<<>>><<<>><<>>>><><<>>>><><<>>><><<<<>>>><<<<>><>><<<<>>><<<>><<<><<>>><<<<><>>><>>><<>>>><<><<<>><<<>>><<<>>><<<>><<>><<><<<<><<<<>>><<<><<<<><<<<><<<><<<><>>><<>>>><>>>><>>><<><<<<><<<>>><<<>>><<><<<<>>>><<<<>>>><<>>>><<>>>><<<<><<>><>><<<><><><>><<<>><<<<>>>><<<<>><<<<>>><<><<<<>><<><>>><<<>><<<><<<<>><><<<<><<<>>><>>><<>>><<>>>><><<>><>>>><<<<><<<<><<><<<>><<<>>>><<>><<>>>><<<<>><<<>><<<><<>><<>>><<>>><<>>><<>>>><<>>><<<<>>><<><<<<>><>><<<><<<>>><<>>>><<<>><>>><<><<<<>>>><>>>><<><>>><<<<><<<><>>>><<<<>>>><<<><>><<<<><<<>>>><<<><<<<>>><<<>><><>><>>>><<<<>>>><>><<<<>>><<>><<<<><<>>>><<<<>><>>><>><<<>>>><>><<<><><<>>>><<<>><<>><>><<><<>><>>><>>><<><><<>>>><<>>>><>>><<>>>><>><"
}